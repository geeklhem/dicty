#!/usr/bin/env/ python
# -*- coding: utf-8 -*-
"""Export tool for the Experiment class."""

import os
import errno
import time 
import socket
import matplotlib.pyplot as plt
import glob

class HtmlExport(object):
    """ HTML Export """
    def __init__(self,name):
        self.date = time.strftime("%Y-%m-%d %H:%M:%S",time.gmtime())
        self.host = socket.gethostname()
       
        self.header = """
        <html>
        <head>
        <title>Experimental picture analysis</title>
        <style type="text/css">
        img {max-width:100%;}
        footer {color:grey;}
                #slide-images{
            position:relative;
            display:block;
            margin:0px;
            padding:0px;
            width:400px;
            height:300px;
            overflow:hidden;
        }
         
        #slide-images li{
            position:absolute;
            display:block;
            list-style-type:none;
            margin:0px;
            padding:0px;
            background-color:#FFFFFF;
        }
         
        #slide-images li img{
            display:block;
            background-color:#FFFFFF;
        }
        </style>

        <slideshow_script_placeholder>

        </head><body>
        <h1>Experimental picture analysis</h1>
        """
        self.footer = """
        <footer>
        Created {date} on {host} 
        </footer>
        </body>""".format(date=self.date,host=self.host)
        self.elements = []
        self.name = name
        self.path = os.path.join("exports",self.name)
        try:
            os.mkdir(self.path)
        except OSError as ex:
            if ex.errno != errno.EEXIST:
                raise

    def export(self):
        """ Write the html file."""
        page = self.header + "".join(self.elements) + self.footer
        with open(os.path.join(self.path,"index.html"), 'w') as f:
            f.write(page)


    def add_all_img(self,pattern):
        """Add to the html export all images files matching a pattern
        :param pattern: The glob pattern.
        :type pattern: str"""
        pics = ""
        for i in sorted(glob.glob(os.path.join(name,pattern))):
               pics += """
               <img src ="{path}" alt="figure matching '{pattern}'"/>
               """.format(path=os.path.basename(i))
        self.elements.append(pics)

    def add_text(self,text):
        """ Add text to the html export.
        :param text: The text to add.
        :type text: str"""
        self.elements.append("<p>{}</p>".format(text))

    def add_title(self,text,lvl=2):
        """ Add a title to the html export.
        :param text: Title text.
        :type text: str
        :param lvl: Level of the title (default 2)
        :type lvl: int
        """ 
        self.elements.append("<h{l}>{title}</h{l}>".format(title=text,l=lvl))

    def add_fig(self,name,graphical_function,args=(),kargs={},proportions=(1,1)):
        """ Generate and add a figure to the html export.
        :param name: file name
        :type name: str
        :param graphical_function: function used to draw the figure.
        :type graphical_function: function
        :param args: unnamed arguments to the graphical function.
        :type args: tuple
        :param kargs: named arguments to the graphical function
        :type kargs: dict
        :param proportions: Proportion of the image file. (Default: (1,1))
        :type proportions: tuple"""

        p = os.path.join(self.path,name+".png")

        graphical_function(*args,show=False,**kargs)
        f = plt.gcf()
        f.set_dpi(150)
        f.set_size_inches((5*proportions[0],5*proportions[1]))
        plt.savefig(p,bbox_inches="tight")
        plt.clf()

        self.elements.append("""
        <img src ="{path}" alt="plot generated by {name}"/>
        """.format(path=name+'.png',name=graphical_function.__name__))

    def add_slideshow(self,name):
        """ Add the javascript slideshow to the html export."""
        try:
            i = self.elements.index("<slideshow>")
        except ValueError:
            i = -1
            self.elements.append("")
        
        images = []
        imgOne = None
        for k,f in enumerate(sorted(glob.glob(os.path.join(self.path,name+"*.png")))):
            if not imgOne:
                imgOne = os.path.basename(f)
            images.append('"{}"'.format(os.path.basename(f)))
        

        script = """ <script language="JavaScript">

        <!-- Begin
        NewImg = new Array (
        {}
        );
        var ImgNum = 0;
        var ImgLength = NewImg.length - 1;
        //Time delay between Slides in milliseconds
        var delay = 3000;
        var lock = false;
        var run;
        function chgImg(direction) {{
        if (document.images) {{
        ImgNum = ImgNum + direction;
        if (ImgNum > ImgLength) {{
        ImgNum = 0;
        }}
        if (ImgNum < 0) {{
        ImgNum = ImgLength;
        }}
        document.slideshow.src = NewImg[ImgNum];
           }}
        }}
        function auto() {{
        if (lock == true) {{
        lock = false;
        window.clearInterval(run);
        }}
        else if (lock == false) {{
        lock = true;
        run = setInterval("chgImg(1)", delay);
          }}
        }}
        //  End -->
        </script> 
        """.format(','.join(images))
        self.header = self.header.replace("<slideshow_script_placeholder>",script)  

    
        ctrl = """  
        <a href="javascript:chgImg(-1)">Previous</a>
        <a href="javascript:auto()">Auto</a>
        <a href="javascript:chgImg(1)">Next</a></div>
        """

        html = '<img src="{}" name="slideshow"/>'.format(imgOne) + ctrl
        self.elements[i] = html 
        return html

